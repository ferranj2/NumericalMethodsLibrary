%% Binomial expansion
%  Written by J.A. Ferrand B.Sc (ID: 2431646)
%  Embry-Riddle Aeronautical University - Daytona Beach
%  College of Engineering (COE), College of Arts and Sciences (COAS)
%  For use in MA 412, MA 413, AE 435, AE 440 and any other course that
%  would benefit from a data-fitting tool.
%% Description
% When a binomial consists of a linear combination of a constant and an
% indeterminate (i.e. an "x" variable) and it is raised to an integer
% power, the resulting polynomial has coefficients that each have a factor
% that obeys a combinations expression nCr. Here, "n" is the order of the
% polynomial, and "r" is the power of the indeterminate that the
% coefficient multiplies. This routine returns in an array the nCr factors.
%% Formulae
% $(A+Bx)^{n} = \sum_{i=0}^{n}{A^{n-i}B^{i}x^{i} \quad _{n}C_{i}}$
%%
% The factors are computed using a recursive formula, thus, evaluation of
% nCr is avoided entirely. The binomial coefficients are evaluated
% according to Pascal's triangle.
%% Required Plugins
% * none
%% Changelog
%  v1.0,(08/09/2022): Initial Release. Reinvented the wheel once again.
%% Syntax
% * INPUT(*n*): Power of the binomial.
% * INPUT(*A*): Coefficient A as in A + Bx (Optional).
% * INPUT(*B*): Coefficient B as in A + Bx (Optional).
% * OUTPUT(*coeff*): Coefficients of the fully expanded polynomial in
% ascending order. First entry is the constant term, subsequent entries are
% the increasing powers of the indeterminate "x".
%% Function definition
function coeff = binexp(n,A,B)
if n < 0
    error('Order of the binomial must be positive!');
end
coeff = zeros(n+1,1);%Allocate buffer.
coeff(1) = 1;
if n == 0 %Zeroth-order polynomial is just a constant.
    return;
end
coeff(n+1) = 1;
if n == 1 %1st-order polynomial (i.e. a binomial) has equal weighing for the indeterminates.
    return;
end
%Higher order binomials weight their indeterminates according to Pascal's
%triangle (or nCr). The base coefficients are recursively generated by
%forming the last row of the corresponding pascal's triangle.
needle = 2;
for ii = 1:n-1
    coeff(needle) = 1 + coeff(needle-1);
    for jj = (needle - 1):-1:2
        coeff(jj) = coeff(jj)+coeff(jj-1);
    end
    needle = needle+1;
end
%Coefficients in case A and B are not one.
if nargin > 1 %Coefficient A provided
    for ii = 1:n
        for jj = 1:n + 1 -ii
            coeff(jj) = coeff(jj)*A;
        end
    end
end
if nargin > 2 %Coefficient B provided
    for ii = 1:n
        for jj = (ii + 1):(n + 1)
            coeff(jj) = coeff(jj)*B;
        end
    end
end
end